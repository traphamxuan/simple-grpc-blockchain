// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/master.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master_RegisterNode_FullMethodName           = "/blockchain.Master/RegisterNode"
	Master_RegisterNewBlockHeader_FullMethodName = "/blockchain.Master/RegisterNewBlockHeader"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeInfo], error)
	RegisterNewBlockHeader(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockHeader], error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[0], Master_RegisterNode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeInfo, NodeInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_RegisterNodeClient = grpc.ServerStreamingClient[NodeInfo]

func (c *masterClient) RegisterNewBlockHeader(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockHeader], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[1], Master_RegisterNewBlockHeader_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeInfo, BlockHeader]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_RegisterNewBlockHeaderClient = grpc.ServerStreamingClient[BlockHeader]

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility.
type MasterServer interface {
	RegisterNode(*NodeInfo, grpc.ServerStreamingServer[NodeInfo]) error
	RegisterNewBlockHeader(*NodeInfo, grpc.ServerStreamingServer[BlockHeader]) error
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterServer struct{}

func (UnimplementedMasterServer) RegisterNode(*NodeInfo, grpc.ServerStreamingServer[NodeInfo]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedMasterServer) RegisterNewBlockHeader(*NodeInfo, grpc.ServerStreamingServer[BlockHeader]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterNewBlockHeader not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}
func (UnimplementedMasterServer) testEmbeddedByValue()                {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	// If the following call pancis, it indicates UnimplementedMasterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_RegisterNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).RegisterNode(m, &grpc.GenericServerStream[NodeInfo, NodeInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_RegisterNodeServer = grpc.ServerStreamingServer[NodeInfo]

func _Master_RegisterNewBlockHeader_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).RegisterNewBlockHeader(m, &grpc.GenericServerStream[NodeInfo, BlockHeader]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_RegisterNewBlockHeaderServer = grpc.ServerStreamingServer[BlockHeader]

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.Master",
	HandlerType: (*MasterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterNode",
			Handler:       _Master_RegisterNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegisterNewBlockHeader",
			Handler:       _Master_RegisterNewBlockHeader_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/master.proto",
}
